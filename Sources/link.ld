/* FIXME: Almost all the comments are outdated. */

MEMORY
{
    ROM     (r  ) : ORIGIN = 0x00000000, LENGTH = 16K
    FLASH   (rx ) : ORIGIN = 0x10000000, LENGTH = 2M
    RAM     (rwx) : ORIGIN = 0x20000000, LENGTH = 256K
    BOOTRAM (rwx) : ORIGIN = 0x20041f00, LENGTH = 256
}

ENTRY(boot_1_debugger);

SECTIONS
{
    /* FIXME: There are a ton of other sections that need to stay. */

    .boot_2_flash : {
        KEEP (*(.boot_2_flash))
    } > BOOTRAM AT > FLASH

    .text : {
        __text_start__ = .;

        KEEP (*(.vectors))
        *(.text*)
        *(.rodata*)

        /* This is generated by the linker. */
        /* My understanding is, that sometimes the linker needs to make a larger workaround and it can't inline that code all the time. */
        /* Instead, the code is moved into these sections, however, this is very poorly documented. */
        *(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)

        . = ALIGN(4);
        __text_end__ = .;
    } > FLASH AT > FLASH

    .init_array : {
        __init_array_start__ = .;
        *(.init_array)
        __init_array_end__ = .;

        /* FIXME: Assert that alignment is correct */
    } > FLASH AT > FLASH

    .data : {
        __data_start__ = .;

        *(.data*)

        . = ALIGN(4);
        __data_end__ = .;
    } > RAM AT > FLASH
    __data_lma__ = LOADADDR(.data);

    .bss (NOLOAD) : {
        __bss_start__ = .;

        *(.bss*)

        . = ALIGN(4);
        __bss_end__ = .;
    } > RAM AT > RAM

    .noinit (NOLOAD) : {
        __noinit_start__ = .;
        *(.noinit*)

        . = ALIGN(4);
        __noinit_end__ = .;
    } > RAM AT > RAM

    .stack (NOLOAD) : {
        . += 0x1000;
        . = ALIGN(8);
        boot_stack_top = .;
    } > RAM AT > RAM

    __end__ = .;

    /* There are tons of other sections, that we explicitly mention here. */
    /* If the compiler mentions something that isn't in this list, this is usually an error and the section should be added with care. */

    /* FIXME: This appears to be putting these sections at different addresses. */
    /*        We want the address to stay the same. */

    .ARM.attributes 0 : { KEEP (*(.ARM.attributes)) }
    .comment 0 : { *(.comment) }
    .debug_line 0 : { *(.debug_line) }
    .debug_line_str 0 : { *(.debug_line_str) }
    .debug_info 0 : { *(.debug_info) }
    .debug_abbrev 0 : { *(.debug_abbrev) }
    .debug_aranges 0 : { *(.debug_aranges) }
    .debug_str 0 : { *(.debug_str) }
    .debug_frame 0 : { *(.debug_frame) }
    .symtab 0 : { *(.symtab) }
    .strtab 0 : { *(.strtab) }
    .shstrtab 0 : { *(.shstrtab) }
}
